name: Release

on:
  push:
    tags:
      - 'v*'

env:
  PROJECT_NAME: "modern-cpp-template"
  BUILD_TYPE: Release

jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
        - {
            name: "Windows Latest MSVC",
            artifact_ext: '.zip',
            os: windows-latest,
            cc: "cl",
            cxx: "cl",
            environment_script: "C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Auxiliary/Build/vcvars64.bat",
          }
        - {
            name: "Ubuntu Latest GCC",
            artifact_ext: '.tar.gz',
            os: ubuntu-latest,
            cc: "gcc",
            cxx: "g++",
          }
        - {
            name: "macOS Latest Clang",
            artifact_ext: '.tar.gz',
            os: macos-latest,
            cc: "clang",
            cxx: "clang++",
          }

    steps:
    - name: set version name (Windows)
      id: version_win
      if: ${{ runner.os == 'Windows' }}
      run: |
        $TAG = (${env:GITHUB_REF} -replace 'refs/tags/', '')
        echo "::set-output name=name::$TAG"
    
    - name: set version name
      id: version
      if: ${{ runner.os != 'Windows' }}
      run: echo ::set-output name=name::${GITHUB_REF#refs/tags/}

    - name: Checkout
      uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: cache dependencies
      uses: actions/cache@v2
      id: cache
      with:
        path: ${{ github.HOME }}/.local
        key: ${{ runner.os }}-dependencies

    - name: install GoogleTest
      if: ${{ steps.cache.output.cache-hit != 'true' }}
      run: |
        cd ..
        git clone https://github.com/google/googletest.git --branch release-1.10.0
        cd googletest
        cmake -Bbuild -DCMAKE_INSTALL_PREFIX="$HOME/.local" -Dgtest_force_shared_crt=1
        cmake --build build --config Release
        cmake --build build --target install --config Release
        cd ../modern-cpp-template

    - name: configure
      run: cmake -Bbuild -DCMAKE_INSTALL_PREFIX="$HOME/.local"
      
    - name: build
      run: cmake --build build --config "$env:BUILD_TYPE" -j4

    - name: run tests
      run: |
        cd build
        ctest -C "$env:BUILD_TYPE" -VV

    # for a release not containing directly the source code, replace the files archived
    # with the actual files needed (i.e. *.lib/*.a and *.h(pp))

    - name: generate archive (Windows)
      if: ${{ runner.os == 'Windows' }}
      run: |
        rmdir -r -fo build
        7z a -tzip $HOME/artifact.zip *


    - name: generate archive
      if: ${{ runner.os != 'Windows' }}
      run: |
        rm -rf build
        tar -cvzf $HOME/artifact.tar.gz .

    - name: upload artifacts
      uses: actions/upload-artifact@v2
      if: ${{ runner.os == 'Windows' }}
      with:
        name: ${{ runner.os }}-${{ steps.version_win.outputs.name }}
        path: '~/artifact.*'

    - name: upload artifacts
      uses: actions/upload-artifact@v2
      if: ${{ runner.os != 'Windows' }}
      with:
        name: ${{ runner.os }}-${{ steps.version.outputs.name }}
        path: '~/artifact.*'

  release:
    if: contains(github.ref, 'tags/v')
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: set version name
      id: version
      run: echo ::set-output name=name::${GITHUB_REF#refs/tags/}

    - name: create release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ steps.version.outputs.name }}
        # if needed, you can set the release body here
        #body: "Release notes"
        draft: false
        prerelease: false

    - name: download artifact
      uses: actions/download-artifact@v2
      with:
        name: "Linux-${{ steps.version.outputs.name }}"
        path: ./

    - name: upload ubuntu release asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: "artifact.tar.gz"
        asset_name: "${{ env.PROJECT_NAME }}-Linux-${{ steps.version.outputs.name }}.tar.gz"
        asset_content_type: application/x-tar

    - name: download artifact
      uses: actions/download-artifact@v2
      with:
        name: "Windows-${{ steps.version.outputs.name }}"
        path: ./

    - name: upload windows release asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: "artifact.zip"
        asset_name: "${{ env.PROJECT_NAME }}-Windows-${{ steps.version.outputs.name }}.zip"
        asset_content_type: application/zip

    - name: download artifact
      uses: actions/download-artifact@v2
      with:
        name: "macOS-${{ steps.version.outputs.name }}"
        path: ./

    - name: upload macos release asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: "./artifact.tar.gz"
        asset_name: "${{ env.PROJECT_NAME }}-macOS-${{ steps.version.outputs.name }}.tar.gz"
        asset_content_type: application/x-tar
